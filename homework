% 定义时间变量t
t = linspace(-4 * pi, 4 * pi, 1000);

% 定义原函数f(t)
f = sawtooth(t);

% 计算傅里叶系数
N = [4, 20, 40]; % 谐波次数
A = zeros(length(N), length(t)); % 存储每个N对应的傅里叶系数
for i = 1:length(N)
    n = N(i);
    for j = 1:N(i)
        a_n = (cos(2 * pi * j)-1)/(2 * pi^2 * j^2);
        b_n = -(cos(2 * pi * j)+1)/(2 * pi * j); % 计算an和bn
        A(i, :) = A(i, :) + a_n * cos(j*t) + b_n * sin(j*t); % 计算合成信号
    end
end

% 绘制原函数和合成函数
figure;
plot(t, f, 'k','DisplayName','original function','LineWidth', 1.5); % 输出原函数
hold on;
for i = 1:length(N) % 输出傅里叶级数
    plot(t, A(i, :), 'DisplayName', ['N=' num2str(N(i))]);
end
xlabel('Time (t)');
ylabel('Amplitude');
title('Original and Synthesized Functions');
legend show;
grid on;
hold off;

% 绘制幅度谱
figure;
for i = 1:length(N)
    subplot(length(N), 1, i);
    n = N(i);
    j = 1:1:N(i);
    an = (cos(2 * pi * j)-1)/(2 * pi^2 * j^2);
    bn = -(cos(2 * pi * j)+1)/(2 * pi * j); % 计算an和bn
    cn = abs([an bn]);
    stem(i,cn);
    xlabel(['Harmonic Order for N=' num2str(N(i))]);
    ylabel('Magnitude');
    title(['Magnitude Spectrum for N=' num2str(N(i))]);
    grid on;
end
